package rest ;
import java.io.BufferedReader ;
import java.io.ByteArrayOutputStream ;
import java.io.IOException ;
import java.io.InputStream ;
import java.io.InputStreamReader ;
import java.io.UnsupportedEncodingException ;
import java.util.List ;
import org.apache.http.HttpEntity ;
import org.apache.http.HttpResponse ;
import org.apache.http.HttpStatus ;
import org.apache.http.NameValuePair ;
import org.apache.http.StatusLine ;
import org.apache.http.client.ClientProtocolException ;
import org.apache.http.client.HttpClient ;
import org.apache.http.client.ResponseHandler ;
import org.apache.http.client.entity.UrlEncodedFormEntity ;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase ;
import org.apache.http.client.methods.HttpGet ;
import org.apache.http.client.methods.HttpPost ;
import org.apache.http.client.methods.HttpPut ;
import org.apache.http.client.methods.HttpRequestBase ;
import org.apache.http.client.utils.URLEncodedUtils ;
import org.apache.http.entity.InputStreamEntity ;
import org.apache.http.entity.StringEntity ;
import org.apache.http.impl.client.BasicResponseHandler ;
import org.apache.http.impl.client.DefaultHttpClient ;
import org.apache.http.params.HttpConnectionParams ;
import org.apache.http.protocol.HTTP ;
import org.json.JSONArray ;
import android.util.Log ;
public class RestServiceClient
{
	private static final int BUFFER_SIZE=1024 ;
	private String userAgent ;
	public RestServiceClient ( String userAgent )
	{
		this.userAgent=userAgent ;
	}
	/**
	 * Get the raw text content of the given URL. This call blocks until the
	 * operation has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public String get(String url) throws RestException
	{
		try
		{
			HttpResponse response=execute(new HttpGet(url)) ;
			return getPlainContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	/**
	 * Get the raw binary content of the given URL. This call blocks until the
	 * operation has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public InputStream getBinary0(String url,String cookie) throws RestException
	{
		try
		{
			HttpGet httpget=new HttpGet(url) ;
			httpget.addHeader("Cookie",cookie) ;
			HttpResponse response=execute(httpget) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	public InputStream putBinary(String url,String cookie) throws RestException
	{
		try
		{
			HttpPut httpget=new HttpPut(url) ;
			httpget.addHeader("Cookie",cookie) ;
			HttpResponse response=execute(httpget) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	
	public InputStream getData(String url) throws RestException
	{
		try
		{
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			// request.setHeader("Authorization", uuid);
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getSyncDrill(String url,String uuid) throws RestException
	{
		try
		{
			/*
			 * DefaultHttpClient httpClient = new DefaultHttpClient(); String
			 * paramString =URLEncodedUtils.format( params , "utf-8" ); url +=
			 * "?" + paramString;
			 */
			/*
			 * HttpGet httpGet = new HttpGet( url ); HttpResponse httpResponse =
			 * httpClient.execute( httpGet ); HttpEntity httpEntity =
			 * httpResponse.getEntity(); is = httpEntity.getContent();
			 */
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			request.setHeader("Authorization",uuid) ;
			// request.setHeader("traditional", "true");
			// HttpResponse response = httpClient.execute(request);
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getValidateEmail(String url) throws RestException
	{
		try
		{
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			// request.setHeader("Authorization", uuid);
			// request.setHeader("partyId", partyID);
			// request.setHeader("emailAddress", email);
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getAgeGroup(String url,String uuid) throws RestException
	{
		try
		{
			// HttpPost request = new HttpPost(url);
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			request.setHeader("Authorization",uuid) ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getCommon(String url,String uuid) throws RestException
	{
		try
		{
			// HttpPost request = new HttpPost(url);
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			request.setHeader("Authorization",uuid) ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream postBinaryAssesment(String url,String json,String uuid) throws RestException
	{
		try
		{
			// HttpPost request = new HttpPost(url);
			HttpPost request=new HttpPost(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			request.setHeader("Authorization",uuid) ;
			if(json!=null&&!json.equals(""))
			{
				StringEntity entity=new StringEntity(json,HTTP.UTF_8) ;
				request.setEntity(entity) ;
			}
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getBinaryJson(String url) throws RestException
	{
		try
		{
			HttpGet httpget=new HttpGet(url) ;
			httpget.setHeader("Accept","*/*") ;
			httpget.setHeader("Content-type","application/json") ;
			HttpResponse response=execute(httpget) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	public InputStream getBinary(String url) throws RestException
	{
		try
		{
			HttpGet httpget=new HttpGet(url) ;
			httpget.addHeader("X-OrbidmeToken","abcdefg123123") ;
			// httpget.setHeader("X-OrbidmeToken", "abcdefg123123");
			HttpResponse response=execute(httpget) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	/*
	 * public InputStream getBinaryJson(String url) throws RestException { try {
	 * HttpResponse response = execute(new HttpGet(url)); //String ret =
	 * EntityUtils.toString(response.getEntity()); return
	 * getBinaryContent(response); } catch (IOException e) { throw new
	 * RestException("GET failed with the REST web service", e); } }
	 */
	public InputStream getBinaryJson(String url,String json) throws RestException
	{
		try
		{
			HttpResponse response=null ;
			if(json!=null&&!json.equals(""))
			{
				// HttpRequestBase request = new HttpGet(url);
				// HttpParams params = new BasicHttpParams();
				// params.setParameter("data", json);
				HttpClient client=new DefaultHttpClient() ;
				HttpConnectionParams.setConnectionTimeout(client.getParams(),10000) ;
				ResponseHandler<String> responseHandler=new BasicResponseHandler() ;
				HttpPost post=new HttpPost(url) ;
				/*
				 * JSONArray array = new JSONArray(); array.put(json);
				 * 
				 * JSONArray jsonArray=new JSONArray(); jsonArray.put(json);
				 * //your current json StringEntity entity=new
				 * StringEntity("data="+jsonArray);
				 * //response.setEntity(entity); post.setEntity(entity);
				 */
				String result=client.execute(post,responseHandler) ;
				Log.i("result ",result) ;
				// request.setParams(params);
				// HttpClient httpClient = new DefaultHttpClient();
				// response = httpClient.execute(request);
				// response.setHeader("Content-type", "application/json");
			}
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("GET failed with the REST web service",e) ;
		}
	}
	/**
	 * Post empty request and return the raw content of the given URL. This call
	 * blocks until the operation has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public InputStream postBinary(String url) throws RestException
	{
		try
		{
			HttpResponse response=execute(new HttpPost(url)) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			System.out.println(e.getMessage()) ;
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream postBinary(String url,String json) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			if(json!=null&&!json.equals(""))
			{
				StringEntity entity=new StringEntity(json,HTTP.UTF_8) ;
				request.setEntity(entity) ;
			}
			// Send request to WCF service
			HttpResponse response=execute(request) ;
			// String ret = EntityUtils.toString(response.getEntity());
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream postBinary(String url,InputStream is,String contentType) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			InputStreamEntity entity=new InputStreamEntity(is,is.available()) ;
			entity.setContentType(contentType) ;
			request.setEntity(entity) ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	/**
	 * Post empty request and return the raw text content of the given URL. This
	 * call blocks until the operation has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public String post(String url) throws RestException
	{
		try
		{
			HttpResponse response=execute(new HttpPost(url)) ;
			return getPlainContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	/**
	 * Post form to the given URL. This call blocks until the operation has
	 * completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @param formParams
	 *            List of form parameters represented as name-value pairs.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public String post(String url,List<NameValuePair> formParams) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			setFormParams(request,formParams) ;
			HttpResponse response=execute(request) ;
			BufferedReader r=new BufferedReader(new InputStreamReader(response.getEntity().getContent())) ;
			int read ;
			char[] buf=new char[2048] ;
			while((read=r.read(buf))!=-1)
			{
				String s=new String(buf) ;
				return s ;
				// System.out.println(s.substring(0,read));
			}
			return "" ;
			// return getPlainContent(response);
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream postBinary(String url,List<NameValuePair> formParams) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			setFormParams(request,formParams) ;
			HttpResponse response=execute(request) ;
			/*
			 * BufferedReader r = new BufferedReader(new
			 * InputStreamReader(response.getEntity().getContent())); int read;
			 * char[] buf = new char[2048]; while ((read = r.read(buf)) != -1) {
			 * String s = new String(buf);
			 * //System.out.println(s.substring(0,read)); }
			 */
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream postRetIS(String url,List<NameValuePair> formParams) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			setFormParams(request,formParams) ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	/**
	 * Posts string data to the given URL. This call blocks until the operation
	 * has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @param body
	 *            String content.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public String post(String url,String body) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			request.setEntity(new StringEntity(body,HTTP.UTF_8)) ;
			HttpResponse response=execute(request) ;
			return getPlainContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	/**
	 * Post empty request and return the raw text content of the given URL. This
	 * call blocks until the operation has completed.
	 * 
	 * @param url
	 *            The exact URL to request.
	 * @param formParams
	 *            List of form parameters represented as name-value pairs.
	 * @param headers
	 *            List of additional http headers.
	 * @return The raw content returned by the server.
	 * @throws RestException
	 *             If any connection or server error occurs.
	 */
	public String post(String url,List<NameValuePair> formParams,List<NameValuePair> headers) throws RestException
	{
		try
		{
			HttpPost request=new HttpPost(url) ;
			setHeaders(request,headers) ;
			setFormParams(request,formParams) ;
			HttpResponse response=execute(request) ;
			return getPlainContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	protected void setHeaders(HttpEntityEnclosingRequestBase request,List<NameValuePair> headers)
	{
		if(request==null||headers==null)
			return ;
		for(NameValuePair pair:headers)
		{
			request.addHeader(pair.getName(),pair.getValue()) ;
		}
	}
	protected void setFormParams(HttpEntityEnclosingRequestBase request,List<NameValuePair> formParams) throws UnsupportedEncodingException
	{
		if(request==null||formParams==null)
			return ;
		// Set HTTP request entity.
		UrlEncodedFormEntity formEntity=new UrlEncodedFormEntity(formParams,HTTP.UTF_8) ;
		request.addHeader(formEntity.getContentType()) ;
		request.addHeader(formEntity.getContentEncoding()) ;
		request.setEntity(formEntity) ;
	}
	protected HttpResponse execute(HttpRequestBase request) throws ClientProtocolException,IOException
	{
		// Create client.
		HttpClient client=new DefaultHttpClient() ;
		request.setHeader("User-Agent",userAgent) ;
		return client.execute(request) ;
	}
	protected String getPlainContent(HttpResponse response) throws RestException,IOException
	{
		// Check if server response is valid
		StatusLine status=response.getStatusLine() ;
		if(status.getStatusCode()!=HttpStatus.SC_OK)
		{
			throw new RestException("Error response from server: "+status.toString(),status.getStatusCode()) ;
		}
		// Pull content stream from response
		HttpEntity entity=response.getEntity() ;
		InputStream inputStream=entity.getContent() ;
		ByteArrayOutputStream content=new ByteArrayOutputStream() ;
		// Read response into a buffered stream
		int readBytes=0 ;
		byte[] buffer=new byte[BUFFER_SIZE] ;
		while((readBytes=inputStream.read(buffer))!=-1)
		{
			content.write(buffer,0,readBytes) ;
		}
		String test=new String(content.toByteArray()) ;
		// Return result from buffered stream
		return new String(content.toByteArray()) ;
	}
	protected InputStream getBinaryContent(HttpResponse response) throws RestException,IOException
	{
		// Check if server response is valid
		StatusLine status=response.getStatusLine() ;
		if(status.getStatusCode()!=HttpStatus.SC_OK)
		{
			throw new RestException("Error response from server: "+status.toString(),status.getStatusCode()) ;
		}
		return response.getEntity().getContent() ;
	}
	public InputStream getURL(String url) throws RestException
	{
		try
		{
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			// request.setHeader("Content-type", "application/json");
			request.setHeader("Content-type","application/x-www-form-urlencoded") ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
	public InputStream getCommon(String url) throws RestException
	{
		try
		{
			HttpGet request=new HttpGet(url) ;
			request.setHeader("Accept","*/*") ;
			request.setHeader("Content-type","application/json") ;
			HttpResponse response=execute(request) ;
			return getBinaryContent(response) ;
		}catch(IOException e)
		{
			throw new RestException("POST failed with the REST web service",e) ;
		}
	}
}
